package com.teamoptimal.cse110project.data;

import com.amazonaws.AmazonServiceException;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.DynamoDBAutoGeneratedKey;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.DynamoDBHashKey;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.DynamoDBIgnore;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.DynamoDBMapper;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.DynamoDBQueryExpression;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.DynamoDBScanExpression;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.DynamoDBTable;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.DynamoDBAttribute;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.PaginatedQueryList;
import com.amazonaws.mobileconnectors.dynamodbv2.dynamodbmapper.PaginatedScanList;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.amazonaws.services.dynamodbv2.model.ComparisonOperator;
import com.teamoptimal.cse110project.CreateRestroomActivity;
import com.teamoptimal.cse110project.MapsActivity;

import android.os.AsyncTask;

import java.util.ArrayList;
import java.util.Map;
import java.util.concurrent.locks.Condition;

@DynamoDBTable(tableName = "Y4R_Restrooms")
public class Restroom{
    private String id;

    //private double[] loc;
    private double longitude;
    private double latitude;

    private static int currID;

    private String user_email;
    private String name;
    private String tags;
    private String floor;
    private String desc;
    private double rating;
    private Integer numRate;

    public Restroom (){
        id = "Uninitialized";
        user_email = null;

        //loc = new double[2];
        longitude = 0.0d;
        latitude = 0.0d;

        name = "Uninitialized";
        tags = "0000000000000000000000000000000";
        //this.initializeTags();
        floor = "1";
        desc = "None Given";
        rating = 0.00;
        numRate=0;
    }

    @DynamoDBAttribute (attributeName = "User")
    public String getUser(){return user_email;}
    public void setUser(String maker){
        user_email = maker;
    }

    @DynamoDBAttribute (attributeName = "Latitude")
    public String getLatit(){return Double.toString(latitude);}
    public void setLatit(String lat){latitude=Double.parseDouble(lat);}

    @DynamoDBAttribute(attributeName = "Longitude")
    public String getLongit(){return Double.toString(longitude);}
    public void setLongit(String lon){longitude= Double.parseDouble(lon);}

    @DynamoDBHashKey (attributeName = "ID")
    public String getID(){ return id;}
    public void setID(String i){ id = i;}

    @DynamoDBAttribute (attributeName = "Name")
    public String getName(){return name;}
    public void setName(String nom){name = nom;}

    @DynamoDBAttribute (attributeName = "Tags")
    public String getTags(){return tags;}
    public void setTags(String newTag){tags = newTag;}

    @DynamoDBAttribute (attributeName = "Floor")
    public String getFloor(){return floor;}
    public void setFloor(String level){floor = level;}

    @DynamoDBAttribute(attributeName = "Description")
    public String getDesc(){return desc; }
    public void setDesc(String descript){ desc = descript;}

    @DynamoDBAttribute(attributeName = "Rating")
    public String getRating(){return Double.toString(rating);}
    public void setRating(String val){rating = Double.parseDouble(val);}

    @DynamoDBAttribute(attributeName = "NumberOfRatings")
    public Integer getNumRate(){return numRate;}
    public void setNumRate(int amount){numRate = amount;}

    public void create() {
        AmazonDynamoDBClient ddb = CreateRestroomActivity.clientManager.ddb();
        DynamoDBMapper mapper = new DynamoDBMapper(ddb);

        mapper.save(this);
    }


    /**
     * Scans the db and returns the list of restrooms

    public PaginatedQueryList<Restroom> getRestList() {

        AmazonDynamoDBClient ddb = CreateRestroomActivity.clientManager.ddb();
        DynamoDBMapper mapper = new DynamoDBMapper(ddb);

        Restroom restroom = new Restroom();

        String queryString = "Great";

        Condition rangeKeyCondition = new Condition()
                .withComparisonOperator(ComparisonOperator.EQ.toString())
                .withAttributeValueList(new AttributeValue().withS(queryString.toString()));

        DynamoDBQueryExpression queryExpression = new DynamoDBQueryExpression()
                .withHashKeyValues(restroom)
                .withRangeKeyCondition("Rating", (com.amazonaws.services.dynamodbv2.model.Condition) rangeKeyCondition)
                .withConsistentRead(false);

        PaginatedQueryList result = mapper.query(Restroom.class, queryExpression);
        return result;
    }*/

    /*
     * Scans the table and returns the list of users.
     */
    public static ArrayList<Restroom> getRestList() {

        AmazonDynamoDBClient ddb = MapsActivity.clientManager.ddb();
        DynamoDBMapper mapper = new DynamoDBMapper(ddb);

        DynamoDBScanExpression scanExpression = new DynamoDBScanExpression();
        try {
            PaginatedScanList<Restroom> result = mapper.scan(
                    Restroom.class, scanExpression);

            ArrayList<Restroom> resultList = new ArrayList<Restroom>();
            for (Restroom rest : result) {
                resultList.add(rest);
            }
            return resultList;

        } catch (AmazonServiceException ex) {
            MapsActivity.clientManager
                    .wipeCredentialsOnAuthError(ex);
        }

        return null;
    }

    @DynamoDBIgnore
    public void setTag(int index, boolean choice){
        char[] chars = tags.toCharArray();
        if(choice){ chars[index] = '1';}
        else{ chars[index] = '0';}
        tags = chars.toString();
    }

    @DynamoDBIgnore
    public double[] getLoc(){
        double[] locate = new double[2];
        locate[0] = longitude;
        locate[1] = latitude;
        return locate;
    }

    @DynamoDBIgnore
    public void setLoc(double lo, double la){
        longitude = lo;
        latitude = la;
    }

    @DynamoDBIgnore
    public void updateRating(double review){
        double sum = (review+(rating*numRate));
        double val = sum/(++numRate);
        setRating(Double.toString(val));
    }

    @DynamoDBIgnore
    public boolean isInitialized(){
        if(longitude != 0.0d && latitude != 0.0d && user_email != null && !name.equals("Uninitialized")){

            id = Integer.toString(++currID);

            return true;
        }
        else return false;
    }

}